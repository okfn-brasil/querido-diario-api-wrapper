# coding: utf-8

"""
    Querido DiÃ¡rio

    API to access the gazettes from all Brazilian cities

    The version of the OpenAPI document: 0.17.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import date, datetime

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Any, Optional

from openapi_client.models.cities_search_response import CitiesSearchResponse
from openapi_client.models.city_level import CityLevel
from openapi_client.models.city_search_response import CitySearchResponse
from openapi_client.models.company_search_response import CompanySearchResponse
from openapi_client.models.create_suggestion_body import CreateSuggestionBody
from openapi_client.models.created_suggestion_response import CreatedSuggestionResponse
from openapi_client.models.entities_search_response import EntitiesSearchResponse
from openapi_client.models.gazette_search_response import GazetteSearchResponse
from openapi_client.models.partners_search_response import PartnersSearchResponse
from openapi_client.models.subthemes_search_response import SubthemesSearchResponse
from openapi_client.models.themed_excerpt_search_response import ThemedExcerptSearchResponse
from openapi_client.models.themes_search_response import ThemesSearchResponse

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get(self, theme : Annotated[StrictStr, Field(..., description="Theme that can be used to search in gazettes by theme.")], **kwargs) -> EntitiesSearchResponse:  # noqa: E501
        """Get All Available Entities Of A Theme  # noqa: E501

        Get all available entities of a theme that can be used to search in gazettes by theme and further filtering by entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get(theme, async_req=True)
        >>> result = thread.get()

        :param theme: Theme that can be used to search in gazettes by theme. (required)
        :type theme: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EntitiesSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get_with_http_info(theme, **kwargs)  # noqa: E501

    @validate_arguments
    def get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get_with_http_info(self, theme : Annotated[StrictStr, Field(..., description="Theme that can be used to search in gazettes by theme.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get All Available Entities Of A Theme  # noqa: E501

        Get all available entities of a theme that can be used to search in gazettes by theme and further filtering by entities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get_with_http_info(theme, async_req=True)
        >>> result = thread.get()

        :param theme: Theme that can be used to search in gazettes by theme. (required)
        :type theme: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EntitiesSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'theme'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_available_entities_of_a_theme_gazettes_by_theme_entities_theme_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['theme'] is not None:
            _path_params['theme'] = _params['theme']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "EntitiesSearchResponse",
            '404': "HTTPExceptionMessage",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/gazettes/by_theme/entities/{theme}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get(self, theme : Annotated[StrictStr, Field(..., description="Theme that can be used to search in gazettes by theme.")], **kwargs) -> SubthemesSearchResponse:  # noqa: E501
        """Get All Available Subthemes Of A Theme  # noqa: E501

        Get all available subthemes of a theme that can be used to search in gazettes by theme and further filtering by subthemes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get(theme, async_req=True)
        >>> result = thread.get()

        :param theme: Theme that can be used to search in gazettes by theme. (required)
        :type theme: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SubthemesSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get_with_http_info(theme, **kwargs)  # noqa: E501

    @validate_arguments
    def get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get_with_http_info(self, theme : Annotated[StrictStr, Field(..., description="Theme that can be used to search in gazettes by theme.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get All Available Subthemes Of A Theme  # noqa: E501

        Get all available subthemes of a theme that can be used to search in gazettes by theme and further filtering by subthemes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get_with_http_info(theme, async_req=True)
        >>> result = thread.get()

        :param theme: Theme that can be used to search in gazettes by theme. (required)
        :type theme: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SubthemesSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'theme'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_available_subthemes_of_a_theme_gazettes_by_theme_subthemes_theme_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['theme'] is not None:
            _path_params['theme'] = _params['theme']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SubthemesSearchResponse",
            '404': "HTTPExceptionMessage",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/gazettes/by_theme/subthemes/{theme}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_all_available_themes_gazettes_by_theme_themes_get(self, **kwargs) -> ThemesSearchResponse:  # noqa: E501
        """Get All Available Themes  # noqa: E501

        Get all available themes that can be used to search in gazettes by theme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_available_themes_gazettes_by_theme_themes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ThemesSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_available_themes_gazettes_by_theme_themes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_all_available_themes_gazettes_by_theme_themes_get_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_all_available_themes_gazettes_by_theme_themes_get_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get All Available Themes  # noqa: E501

        Get all available themes that can be used to search in gazettes by theme.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_available_themes_gazettes_by_theme_themes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ThemesSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_available_themes_gazettes_by_theme_themes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ThemesSearchResponse",
        }

        return self.api_client.call_api(
            '/gazettes/by_theme/themes/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_city_by_ibgeid_cities_territory_id_get(self, territory_id : Annotated[StrictStr, Field(..., description="City's 7-digit IBGE ID.")], **kwargs) -> CitySearchResponse:  # noqa: E501
        """Get City By Ibge Id  # noqa: E501

        Get general info from specific city with 7-digit IBGE ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_city_by_ibgeid_cities_territory_id_get(territory_id, async_req=True)
        >>> result = thread.get()

        :param territory_id: City's 7-digit IBGE ID. (required)
        :type territory_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CitySearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_city_by_ibgeid_cities_territory_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_city_by_ibgeid_cities_territory_id_get_with_http_info(territory_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_city_by_ibgeid_cities_territory_id_get_with_http_info(self, territory_id : Annotated[StrictStr, Field(..., description="City's 7-digit IBGE ID.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get City By Ibge Id  # noqa: E501

        Get general info from specific city with 7-digit IBGE ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_city_by_ibgeid_cities_territory_id_get_with_http_info(territory_id, async_req=True)
        >>> result = thread.get()

        :param territory_id: City's 7-digit IBGE ID. (required)
        :type territory_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CitySearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'territory_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_city_by_ibgeid_cities_territory_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['territory_id'] is not None:
            _path_params['territory_id'] = _params['territory_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CitySearchResponse",
            '404': "HTTPExceptionMessage",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/cities/{territory_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_company_info_by_cnpj_number_company_info_cnpj_get(self, cnpj : Annotated[StrictStr, Field(..., description="Company's CNPJ number (may include non-digit characters).")], **kwargs) -> CompanySearchResponse:  # noqa: E501
        """Get Company Info By Cnpj Number  # noqa: E501

        Get info from specific company by its CNPJ number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_company_info_by_cnpj_number_company_info_cnpj_get(cnpj, async_req=True)
        >>> result = thread.get()

        :param cnpj: Company's CNPJ number (may include non-digit characters). (required)
        :type cnpj: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CompanySearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_company_info_by_cnpj_number_company_info_cnpj_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_company_info_by_cnpj_number_company_info_cnpj_get_with_http_info(cnpj, **kwargs)  # noqa: E501

    @validate_arguments
    def get_company_info_by_cnpj_number_company_info_cnpj_get_with_http_info(self, cnpj : Annotated[StrictStr, Field(..., description="Company's CNPJ number (may include non-digit characters).")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Company Info By Cnpj Number  # noqa: E501

        Get info from specific company by its CNPJ number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_company_info_by_cnpj_number_company_info_cnpj_get_with_http_info(cnpj, async_req=True)
        >>> result = thread.get()

        :param cnpj: Company's CNPJ number (may include non-digit characters). (required)
        :type cnpj: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CompanySearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cnpj'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_company_info_by_cnpj_number_company_info_cnpj_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['cnpj'] is not None:
            _path_params['cnpj'] = _params['cnpj']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CompanySearchResponse",
            '404': "HTTPExceptionMessage",
            '400': "HTTPExceptionMessage",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/company/info/{cnpj}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get(self, cnpj : Annotated[StrictStr, Field(..., description="Company's CNPJ number (may include non-digit characters).")], **kwargs) -> PartnersSearchResponse:  # noqa: E501
        """Get Company Partners Infos By Cnpj Number  # noqa: E501

        Get info of partners of a company by its CNPJ number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get(cnpj, async_req=True)
        >>> result = thread.get()

        :param cnpj: Company's CNPJ number (may include non-digit characters). (required)
        :type cnpj: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PartnersSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get_with_http_info(cnpj, **kwargs)  # noqa: E501

    @validate_arguments
    def get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get_with_http_info(self, cnpj : Annotated[StrictStr, Field(..., description="Company's CNPJ number (may include non-digit characters).")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Company Partners Infos By Cnpj Number  # noqa: E501

        Get info of partners of a company by its CNPJ number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get_with_http_info(cnpj, async_req=True)
        >>> result = thread.get()

        :param cnpj: Company's CNPJ number (may include non-digit characters). (required)
        :type cnpj: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PartnersSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cnpj'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_company_partners_infos_by_cnpj_number_company_partners_cnpj_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['cnpj'] is not None:
            _path_params['cnpj'] = _params['cnpj']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PartnersSearchResponse",
            '400': "HTTPExceptionMessage",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/company/partners/{cnpj}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_for_cities_by_name_cities_get(self, city_name : Annotated[Optional[StrictStr], Field(description="Search for cities with a similar name (empty field returns all cities).")] = None, levels : Annotated[Optional[conlist(CityLevel)], Field(description="Search for cities within the same openness level (empty field returns from all levels)")] = None, **kwargs) -> CitiesSearchResponse:  # noqa: E501
        """Search For Cities By Name.  # noqa: E501

        Search for cities with a name similar to the city_name query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_for_cities_by_name_cities_get(city_name, levels, async_req=True)
        >>> result = thread.get()

        :param city_name: Search for cities with a similar name (empty field returns all cities).
        :type city_name: str
        :param levels: Search for cities within the same openness level (empty field returns from all levels)
        :type levels: List[CityLevel]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CitiesSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_for_cities_by_name_cities_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_for_cities_by_name_cities_get_with_http_info(city_name, levels, **kwargs)  # noqa: E501

    @validate_arguments
    def search_for_cities_by_name_cities_get_with_http_info(self, city_name : Annotated[Optional[StrictStr], Field(description="Search for cities with a similar name (empty field returns all cities).")] = None, levels : Annotated[Optional[conlist(CityLevel)], Field(description="Search for cities within the same openness level (empty field returns from all levels)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search For Cities By Name.  # noqa: E501

        Search for cities with a name similar to the city_name query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_for_cities_by_name_cities_get_with_http_info(city_name, levels, async_req=True)
        >>> result = thread.get()

        :param city_name: Search for cities with a similar name (empty field returns all cities).
        :type city_name: str
        :param levels: Search for cities within the same openness level (empty field returns from all levels)
        :type levels: List[CityLevel]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CitiesSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'city_name',
            'levels'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_for_cities_by_name_cities_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('city_name') is not None:  # noqa: E501
            _query_params.append(('city_name', _params['city_name']))

        if _params.get('levels') is not None:  # noqa: E501
            _query_params.append(('levels', _params['levels']))
            _collection_formats['levels'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CitiesSearchResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/cities', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get(self, theme : Annotated[StrictStr, Field(..., description="Search in excerpts from gazettes that are associated to the given theme.")], entities : Annotated[Optional[conlist(StrictStr)], Field(description="Search in excerpts which contains any of the given entities (entities are theme-specific).")] = None, subthemes : Annotated[Optional[conlist(StrictStr)], Field(description="Search in excerpts which contains any of the given subthemes (subthemes are theme-specific).")] = None, territory_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Search in excerpts from gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).")] = None, published_since : Annotated[Optional[date], Field(description="Search in excerpts from gazettes published on given date or after (format: YYYY-MM-DD).")] = None, published_until : Annotated[Optional[date], Field(description="Search in excerpts from gazettes published on given date or before (format: YYYY-MM-DD).")] = None, scraped_since : Annotated[Optional[datetime], Field(description="Search in excerpts from gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).")] = None, scraped_until : Annotated[Optional[datetime], Field(description="Search in excerpts from gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).")] = None, querystring : Annotated[Optional[StrictStr], Field(description="Search in excerpts using OpenSearch's \"simple query string syntax\".")] = None, pre_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.")] = None, post_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.")] = None, size : Annotated[Optional[StrictInt], Field(description="Maximum number of results to be returned in the response (use with caution).")] = None, offset : Annotated[Optional[StrictInt], Field(description="Number of search results to be skipped in the response.")] = None, sort_by : Annotated[Optional[Any], Field(description="How to sort the search results.")] = None, **kwargs) -> ThemedExcerptSearchResponse:  # noqa: E501
        """Search For Content In Gazette Excerpts Associated With A Theme  # noqa: E501

        Search for content in excerpts from available cities that are related to an available theme. Each search result is an excerpt from a gazette.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get(theme, entities, subthemes, territory_ids, published_since, published_until, scraped_since, scraped_until, querystring, pre_tags, post_tags, size, offset, sort_by, async_req=True)
        >>> result = thread.get()

        :param theme: Search in excerpts from gazettes that are associated to the given theme. (required)
        :type theme: str
        :param entities: Search in excerpts which contains any of the given entities (entities are theme-specific).
        :type entities: List[str]
        :param subthemes: Search in excerpts which contains any of the given subthemes (subthemes are theme-specific).
        :type subthemes: List[str]
        :param territory_ids: Search in excerpts from gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).
        :type territory_ids: List[str]
        :param published_since: Search in excerpts from gazettes published on given date or after (format: YYYY-MM-DD).
        :type published_since: date
        :param published_until: Search in excerpts from gazettes published on given date or before (format: YYYY-MM-DD).
        :type published_until: date
        :param scraped_since: Search in excerpts from gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_since: datetime
        :param scraped_until: Search in excerpts from gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_until: datetime
        :param querystring: Search in excerpts using OpenSearch's \"simple query string syntax\".
        :type querystring: str
        :param pre_tags: List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.
        :type pre_tags: List[str]
        :param post_tags: List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.
        :type post_tags: List[str]
        :param size: Maximum number of results to be returned in the response (use with caution).
        :type size: int
        :param offset: Number of search results to be skipped in the response.
        :type offset: int
        :param sort_by: How to sort the search results.
        :type sort_by: SortBy
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ThemedExcerptSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get_with_http_info(theme, entities, subthemes, territory_ids, published_since, published_until, scraped_since, scraped_until, querystring, pre_tags, post_tags, size, offset, sort_by, **kwargs)  # noqa: E501

    @validate_arguments
    def search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get_with_http_info(self, theme : Annotated[StrictStr, Field(..., description="Search in excerpts from gazettes that are associated to the given theme.")], entities : Annotated[Optional[conlist(StrictStr)], Field(description="Search in excerpts which contains any of the given entities (entities are theme-specific).")] = None, subthemes : Annotated[Optional[conlist(StrictStr)], Field(description="Search in excerpts which contains any of the given subthemes (subthemes are theme-specific).")] = None, territory_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Search in excerpts from gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).")] = None, published_since : Annotated[Optional[date], Field(description="Search in excerpts from gazettes published on given date or after (format: YYYY-MM-DD).")] = None, published_until : Annotated[Optional[date], Field(description="Search in excerpts from gazettes published on given date or before (format: YYYY-MM-DD).")] = None, scraped_since : Annotated[Optional[datetime], Field(description="Search in excerpts from gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).")] = None, scraped_until : Annotated[Optional[datetime], Field(description="Search in excerpts from gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).")] = None, querystring : Annotated[Optional[StrictStr], Field(description="Search in excerpts using OpenSearch's \"simple query string syntax\".")] = None, pre_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.")] = None, post_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.")] = None, size : Annotated[Optional[StrictInt], Field(description="Maximum number of results to be returned in the response (use with caution).")] = None, offset : Annotated[Optional[StrictInt], Field(description="Number of search results to be skipped in the response.")] = None, sort_by : Annotated[Optional[Any], Field(description="How to sort the search results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search For Content In Gazette Excerpts Associated With A Theme  # noqa: E501

        Search for content in excerpts from available cities that are related to an available theme. Each search result is an excerpt from a gazette.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get_with_http_info(theme, entities, subthemes, territory_ids, published_since, published_until, scraped_since, scraped_until, querystring, pre_tags, post_tags, size, offset, sort_by, async_req=True)
        >>> result = thread.get()

        :param theme: Search in excerpts from gazettes that are associated to the given theme. (required)
        :type theme: str
        :param entities: Search in excerpts which contains any of the given entities (entities are theme-specific).
        :type entities: List[str]
        :param subthemes: Search in excerpts which contains any of the given subthemes (subthemes are theme-specific).
        :type subthemes: List[str]
        :param territory_ids: Search in excerpts from gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).
        :type territory_ids: List[str]
        :param published_since: Search in excerpts from gazettes published on given date or after (format: YYYY-MM-DD).
        :type published_since: date
        :param published_until: Search in excerpts from gazettes published on given date or before (format: YYYY-MM-DD).
        :type published_until: date
        :param scraped_since: Search in excerpts from gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_since: datetime
        :param scraped_until: Search in excerpts from gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_until: datetime
        :param querystring: Search in excerpts using OpenSearch's \"simple query string syntax\".
        :type querystring: str
        :param pre_tags: List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.
        :type pre_tags: List[str]
        :param post_tags: List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.
        :type post_tags: List[str]
        :param size: Maximum number of results to be returned in the response (use with caution).
        :type size: int
        :param offset: Number of search results to be skipped in the response.
        :type offset: int
        :param sort_by: How to sort the search results.
        :type sort_by: SortBy
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ThemedExcerptSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'theme',
            'entities',
            'subthemes',
            'territory_ids',
            'published_since',
            'published_until',
            'scraped_since',
            'scraped_until',
            'querystring',
            'pre_tags',
            'post_tags',
            'size',
            'offset',
            'sort_by'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_for_content_in_gazette_excerpts_associated_with_a_theme_gazettes_by_theme_theme_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['theme'] is not None:
            _path_params['theme'] = _params['theme']


        # process the query parameters
        _query_params = []
        if _params.get('entities') is not None:  # noqa: E501
            _query_params.append(('entities', _params['entities']))
            _collection_formats['entities'] = 'multi'

        if _params.get('subthemes') is not None:  # noqa: E501
            _query_params.append(('subthemes', _params['subthemes']))
            _collection_formats['subthemes'] = 'multi'

        if _params.get('territory_ids') is not None:  # noqa: E501
            _query_params.append(('territory_ids', _params['territory_ids']))
            _collection_formats['territory_ids'] = 'multi'

        if _params.get('published_since') is not None:  # noqa: E501
            if isinstance(_params['published_since'], date):
                _query_params.append(('published_since', _params['published_since'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('published_since', _params['published_since']))

        if _params.get('published_until') is not None:  # noqa: E501
            if isinstance(_params['published_until'], date):
                _query_params.append(('published_until', _params['published_until'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('published_until', _params['published_until']))

        if _params.get('scraped_since') is not None:  # noqa: E501
            if isinstance(_params['scraped_since'], datetime):
                _query_params.append(('scraped_since', _params['scraped_since'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('scraped_since', _params['scraped_since']))

        if _params.get('scraped_until') is not None:  # noqa: E501
            if isinstance(_params['scraped_until'], datetime):
                _query_params.append(('scraped_until', _params['scraped_until'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('scraped_until', _params['scraped_until']))

        if _params.get('querystring') is not None:  # noqa: E501
            _query_params.append(('querystring', _params['querystring']))

        if _params.get('pre_tags') is not None:  # noqa: E501
            _query_params.append(('pre_tags', _params['pre_tags']))
            _collection_formats['pre_tags'] = 'multi'

        if _params.get('post_tags') is not None:  # noqa: E501
            _query_params.append(('post_tags', _params['post_tags']))
            _collection_formats['post_tags'] = 'multi'

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sort_by', _params['sort_by'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ThemedExcerptSearchResponse",
            '404': "HTTPExceptionMessage",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/gazettes/by_theme/{theme}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_for_content_in_gazettes_gazettes_get(self, territory_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Search in gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).")] = None, published_since : Annotated[Optional[date], Field(description="Search in gazettes published on given date or after (format: YYYY-MM-DD).")] = None, published_until : Annotated[Optional[date], Field(description="Search in gazettes published on given date or before (format: YYYY-MM-DD).")] = None, scraped_since : Annotated[Optional[datetime], Field(description="Search in gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).")] = None, scraped_until : Annotated[Optional[datetime], Field(description="Search in gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).")] = None, querystring : Annotated[Optional[StrictStr], Field(description="Search in gazettes using OpenSearch's \"simple query string syntax\" (an empty field returns no excerpts, only the results metadata).")] = None, excerpt_size : Annotated[Optional[StrictInt], Field(description="Maximum number of characters that an excerpt should display (use with caution).")] = None, number_of_excerpts : Annotated[Optional[StrictInt], Field(description="Maximum number of excerpts of a gazette to be returned (use with caution).")] = None, pre_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.")] = None, post_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.")] = None, size : Annotated[Optional[StrictInt], Field(description="Maximum number of results to be returned in the response (use with caution).")] = None, offset : Annotated[Optional[StrictInt], Field(description="Number of search results to be skipped in the response.")] = None, sort_by : Annotated[Optional[Any], Field(description="How to sort the search results.")] = None, **kwargs) -> GazetteSearchResponse:  # noqa: E501
        """Search For Content In Gazettes  # noqa: E501

        Search for content in published gazettes from available cities. Each search result is an individual gazette.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_for_content_in_gazettes_gazettes_get(territory_ids, published_since, published_until, scraped_since, scraped_until, querystring, excerpt_size, number_of_excerpts, pre_tags, post_tags, size, offset, sort_by, async_req=True)
        >>> result = thread.get()

        :param territory_ids: Search in gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).
        :type territory_ids: List[str]
        :param published_since: Search in gazettes published on given date or after (format: YYYY-MM-DD).
        :type published_since: date
        :param published_until: Search in gazettes published on given date or before (format: YYYY-MM-DD).
        :type published_until: date
        :param scraped_since: Search in gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_since: datetime
        :param scraped_until: Search in gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_until: datetime
        :param querystring: Search in gazettes using OpenSearch's \"simple query string syntax\" (an empty field returns no excerpts, only the results metadata).
        :type querystring: str
        :param excerpt_size: Maximum number of characters that an excerpt should display (use with caution).
        :type excerpt_size: int
        :param number_of_excerpts: Maximum number of excerpts of a gazette to be returned (use with caution).
        :type number_of_excerpts: int
        :param pre_tags: List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.
        :type pre_tags: List[str]
        :param post_tags: List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.
        :type post_tags: List[str]
        :param size: Maximum number of results to be returned in the response (use with caution).
        :type size: int
        :param offset: Number of search results to be skipped in the response.
        :type offset: int
        :param sort_by: How to sort the search results.
        :type sort_by: SortBy
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GazetteSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_for_content_in_gazettes_gazettes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_for_content_in_gazettes_gazettes_get_with_http_info(territory_ids, published_since, published_until, scraped_since, scraped_until, querystring, excerpt_size, number_of_excerpts, pre_tags, post_tags, size, offset, sort_by, **kwargs)  # noqa: E501

    @validate_arguments
    def search_for_content_in_gazettes_gazettes_get_with_http_info(self, territory_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Search in gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).")] = None, published_since : Annotated[Optional[date], Field(description="Search in gazettes published on given date or after (format: YYYY-MM-DD).")] = None, published_until : Annotated[Optional[date], Field(description="Search in gazettes published on given date or before (format: YYYY-MM-DD).")] = None, scraped_since : Annotated[Optional[datetime], Field(description="Search in gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).")] = None, scraped_until : Annotated[Optional[datetime], Field(description="Search in gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).")] = None, querystring : Annotated[Optional[StrictStr], Field(description="Search in gazettes using OpenSearch's \"simple query string syntax\" (an empty field returns no excerpts, only the results metadata).")] = None, excerpt_size : Annotated[Optional[StrictInt], Field(description="Maximum number of characters that an excerpt should display (use with caution).")] = None, number_of_excerpts : Annotated[Optional[StrictInt], Field(description="Maximum number of excerpts of a gazette to be returned (use with caution).")] = None, pre_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.")] = None, post_tags : Annotated[Optional[conlist(StrictStr)], Field(description="List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.")] = None, size : Annotated[Optional[StrictInt], Field(description="Maximum number of results to be returned in the response (use with caution).")] = None, offset : Annotated[Optional[StrictInt], Field(description="Number of search results to be skipped in the response.")] = None, sort_by : Annotated[Optional[Any], Field(description="How to sort the search results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search For Content In Gazettes  # noqa: E501

        Search for content in published gazettes from available cities. Each search result is an individual gazette.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_for_content_in_gazettes_gazettes_get_with_http_info(territory_ids, published_since, published_until, scraped_since, scraped_until, querystring, excerpt_size, number_of_excerpts, pre_tags, post_tags, size, offset, sort_by, async_req=True)
        >>> result = thread.get()

        :param territory_ids: Search in gazettes published by cities with the given 7-digit IBGE IDs (an empty field searches in all available cities).
        :type territory_ids: List[str]
        :param published_since: Search in gazettes published on given date or after (format: YYYY-MM-DD).
        :type published_since: date
        :param published_until: Search in gazettes published on given date or before (format: YYYY-MM-DD).
        :type published_until: date
        :param scraped_since: Search in gazettes scraped on given datetime or after (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_since: datetime
        :param scraped_until: Search in gazettes scraped on given datetime or before (format: YYYY-MM-DDTHH:MM:SS).
        :type scraped_until: datetime
        :param querystring: Search in gazettes using OpenSearch's \"simple query string syntax\" (an empty field returns no excerpts, only the results metadata).
        :type querystring: str
        :param excerpt_size: Maximum number of characters that an excerpt should display (use with caution).
        :type excerpt_size: int
        :param number_of_excerpts: Maximum number of excerpts of a gazette to be returned (use with caution).
        :type number_of_excerpts: int
        :param pre_tags: List of strings (usually HTML tags) to be inserted before the text which matches the query in the excerpts.
        :type pre_tags: List[str]
        :param post_tags: List of strings (usually HTML tags) to be inserted after the text which matches the query in the excerpts.
        :type post_tags: List[str]
        :param size: Maximum number of results to be returned in the response (use with caution).
        :type size: int
        :param offset: Number of search results to be skipped in the response.
        :type offset: int
        :param sort_by: How to sort the search results.
        :type sort_by: SortBy
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GazetteSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'territory_ids',
            'published_since',
            'published_until',
            'scraped_since',
            'scraped_until',
            'querystring',
            'excerpt_size',
            'number_of_excerpts',
            'pre_tags',
            'post_tags',
            'size',
            'offset',
            'sort_by'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_for_content_in_gazettes_gazettes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('territory_ids') is not None:  # noqa: E501
            _query_params.append(('territory_ids', _params['territory_ids']))
            _collection_formats['territory_ids'] = 'multi'

        if _params.get('published_since') is not None:  # noqa: E501
            if isinstance(_params['published_since'], date):
                _query_params.append(('published_since', _params['published_since'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('published_since', _params['published_since']))

        if _params.get('published_until') is not None:  # noqa: E501
            if isinstance(_params['published_until'], date):
                _query_params.append(('published_until', _params['published_until'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('published_until', _params['published_until']))

        if _params.get('scraped_since') is not None:  # noqa: E501
            if isinstance(_params['scraped_since'], datetime):
                _query_params.append(('scraped_since', _params['scraped_since'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('scraped_since', _params['scraped_since']))

        if _params.get('scraped_until') is not None:  # noqa: E501
            if isinstance(_params['scraped_until'], datetime):
                _query_params.append(('scraped_until', _params['scraped_until'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('scraped_until', _params['scraped_until']))

        if _params.get('querystring') is not None:  # noqa: E501
            _query_params.append(('querystring', _params['querystring']))

        if _params.get('excerpt_size') is not None:  # noqa: E501
            _query_params.append(('excerpt_size', _params['excerpt_size']))

        if _params.get('number_of_excerpts') is not None:  # noqa: E501
            _query_params.append(('number_of_excerpts', _params['number_of_excerpts']))

        if _params.get('pre_tags') is not None:  # noqa: E501
            _query_params.append(('pre_tags', _params['pre_tags']))
            _collection_formats['pre_tags'] = 'multi'

        if _params.get('post_tags') is not None:  # noqa: E501
            _query_params.append(('post_tags', _params['post_tags']))
            _collection_formats['post_tags'] = 'multi'

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sort_by', _params['sort_by'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GazetteSearchResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/gazettes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def send_a_suggestion_suggestions_post(self, create_suggestion_body : CreateSuggestionBody, **kwargs) -> CreatedSuggestionResponse:  # noqa: E501
        """Send A Suggestion  # noqa: E501

        Send a suggestion to the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_a_suggestion_suggestions_post(create_suggestion_body, async_req=True)
        >>> result = thread.get()

        :param create_suggestion_body: (required)
        :type create_suggestion_body: CreateSuggestionBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatedSuggestionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the send_a_suggestion_suggestions_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.send_a_suggestion_suggestions_post_with_http_info(create_suggestion_body, **kwargs)  # noqa: E501

    @validate_arguments
    def send_a_suggestion_suggestions_post_with_http_info(self, create_suggestion_body : CreateSuggestionBody, **kwargs) -> ApiResponse:  # noqa: E501
        """Send A Suggestion  # noqa: E501

        Send a suggestion to the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_a_suggestion_suggestions_post_with_http_info(create_suggestion_body, async_req=True)
        >>> result = thread.get()

        :param create_suggestion_body: (required)
        :type create_suggestion_body: CreateSuggestionBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatedSuggestionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_suggestion_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_a_suggestion_suggestions_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_suggestion_body'] is not None:
            _body_params = _params['create_suggestion_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "CreatedSuggestionResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/suggestions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
