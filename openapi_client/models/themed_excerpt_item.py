# coding: utf-8

"""
    Querido DiÃ¡rio

    API to access the gazettes from all Brazilian cities

    The version of the OpenAPI document: 0.17.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class ThemedExcerptItem(BaseModel):
    """
    ThemedExcerptItem
    """
    territory_id: StrictStr = Field(...)
    var_date: date = Field(..., alias="date")
    scraped_at: datetime = Field(...)
    url: StrictStr = Field(...)
    territory_name: StrictStr = Field(...)
    state_code: StrictStr = Field(...)
    excerpt: StrictStr = Field(...)
    subthemes: conlist(StrictStr) = Field(...)
    entities: Optional[conlist(StrictStr)] = None
    edition: Optional[StrictStr] = None
    is_extra_edition: Optional[StrictBool] = None
    txt_url: Optional[StrictStr] = None
    __properties = ["territory_id", "date", "scraped_at", "url", "territory_name", "state_code", "excerpt", "subthemes", "entities", "edition", "is_extra_edition", "txt_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ThemedExcerptItem:
        """Create an instance of ThemedExcerptItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ThemedExcerptItem:
        """Create an instance of ThemedExcerptItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ThemedExcerptItem.parse_obj(obj)

        _obj = ThemedExcerptItem.parse_obj({
            "territory_id": obj.get("territory_id"),
            "var_date": obj.get("date"),
            "scraped_at": obj.get("scraped_at"),
            "url": obj.get("url"),
            "territory_name": obj.get("territory_name"),
            "state_code": obj.get("state_code"),
            "excerpt": obj.get("excerpt"),
            "subthemes": obj.get("subthemes"),
            "entities": obj.get("entities"),
            "edition": obj.get("edition"),
            "is_extra_edition": obj.get("is_extra_edition"),
            "txt_url": obj.get("txt_url")
        })
        return _obj


